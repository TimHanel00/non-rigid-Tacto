class SampleProcessingException(Exception):
    """Exception to be thrown inside a block in case this sample cannot be processed further.

    This exception should be thrown on processing errors, not on pipeline errors.
    For example, if the random nature of the pipeline leads to a sample being either
    invalid, unstable or unusable then this error should be raised.
    In this case the pipeline will know to stop processing this sample, but continue
    with the rest of the pipeline.
    If, on the other hand, something went wrong with the pipeline, like a calculation
    or configuration error, other exception types should be raised.
    """

    def __init__(
        self, 
        pipeline_block, 
        data_sample, 
        message: str,
    ) ->None:
        """  
        Args:
            pipeline_block:
            data_sample:
            message:
        """

        self.pipeline_block = pipeline_block
        self.data_sample = data_sample
        self.message = message
        super().__init__(self.message)
    
        self.data_sample.add_processing_error(self)
        self.data_sample.clear_successfully_processed( pipeline_block )

    def __str__(
        self,
    ) ->str:
        return f'[Sample {self.data_sample.id}] {self.message}'

    @property
    def delete_block_outputs(self) -> bool:
        """Delete the outputs of the pipeline block throwing the exception
        since they can be considered to be broken."""
        return True



class SampleValidationException(SampleProcessingException):
    """
    Exception to be thrown when a block's validate_sample() function returns False.
    This exception should be thrown on semantic issues with the sample, not on
    processing errors or pipeline errors.
    For example, if triangles in the mesh become too big or the displacements
    generated by a displacement block are larger than desired then this error should
    be raised.
    In this case the pipeline will know to stop processing this sample, but continue
    with the rest of the pipeline.
    If, on the other hand, something went wrong with the pipeline, like a calculation
    or configuration error, other exception types should be raised.
    """

    @property
    def delete_block_outputs(self) -> bool:
        """Do not delete the outputs of the block previously run on the sample
        for debugging purposes since they are intact code-wise."""
        return False

